require('dotenv').config();
process.env.NTBA_FIX_319 = 1;
const TelegramApi = require('node-telegram-bot-api');
const sequelize = require('./db');
const UserModel = require('./models');
const questions = require('./questions');
const questionsTest = require('./questionsTest');
const bot = new TelegramApi(process.env.TELEGRAM_BOT_TEST_API_KEY, {
  polling: true,
});
let canGetNextQuestion = true;

bot.setMyCommands([
  { command: '/quiz', description: '–ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å OLIMPBET QUIZ!' },
  { command: '/info', description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–±—Ä–∞–Ω–Ω—ã–µ –æ—á–∫–∏' },
  { command: '/rules', description: '–ü—Ä–∞–≤–∏–ª–∞' },
  { command: '/leaderboard', description: '–õ–∏–¥–µ—Ä—ã OLIMPBET QUIZ' },
  { command: '/promo', description: '–ê–∫—Ü–∏–∏ OLIMPBET' },
]);

const startQuestion = async (chatId, user) => {
  let questionIndex = user.countAnswers;
  let question = questions[questionIndex];
  let answerOptions = {
    reply_markup: JSON.stringify({
      one_time_keyboard: true,
      inline_keyboard: [
        [
          {
            text: question.variant1,
            callback_data: `${question.id}_${question.variant1}`,
          },
        ],
        [
          {
            text: question.variant2,
            callback_data: `${question.id}_${question.variant2}`,
          },
        ],
        [
          {
            text: question.variant3,
            callback_data: `${question.id}_${question.variant3}`,
          },
        ],
        [
          {
            text: question.variant4,
            callback_data: `${question.id}_${question.variant4}`,
          },
        ],
      ],
    }),
  };
  let timer = 30;
  const basePoints = 60;
  let imgMsgId = '';
  bot
    .sendPhoto(chatId, question.img)
    .then((imgMsg) => {
      imgMsgId = imgMsg.message_id;
      imgMsgChatId = imgMsg.chat.chat_id;
      user.countAnswers++;
      user.save();
    })
    .then(() => {
      bot
        .sendMessage(
          chatId,
          `–í—Å–µ–≥–æ 30 —Å–µ–∫—É–Ω–¥ –æ—Ç –æ—Ç–≤–µ—Ç! \n\n‚ÄºÔ∏è<b><i>–ù–µ —Ç–µ—Ä—è–π –≤—Ä–µ–º—è</i></b>‚ÄºÔ∏è`,
          { parse_mode: 'HTML' }
        )
        .then((msgData) => {
          let intervalId = setInterval(() => {
            timer--;
            bot
              .editMessageText(
                `–í—Å–µ–≥–æ 30 —Å–µ–∫—É–Ω–¥ –æ—Ç –æ—Ç–≤–µ—Ç! \n\n‚ÄºÔ∏è<b><i>–û—Å—Ç–∞–ª–æ—Å—å ${timer} —Å–µ–∫—É–Ω–¥.</i></b>‚ÄºÔ∏è`,
                {
                  ...answerOptions,
                  chat_id: msgData.chat.id,
                  message_id: msgData.message_id,
                  parse_mode: 'HTML',
                }
              )
              .then(() => {
                if (timer === 0) {
                  clearInterval(intervalId);
                  bot
                    .editMessageText(
                      `–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Ññ${
                        question.id
                      }: \n–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –≤—ã—à–ª–æ :( –ü–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∫–æ–º–∞–Ω–¥–æ–π /quiz \n\n${
                        questions[questionIndex + 1]
                          ? `–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω c ${new Date(
                              questions[questionIndex + 1].date * 1000 +
                                10800000
                            ).toLocaleString('ru-RU')} –ø–æ –ú–°–ö`
                          : '–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å'
                      }`,
                      {
                        chat_id: msgData.chat.id,
                        message_id: msgData.message_id,
                        parse_mode: 'HTML',
                      }
                    )
                    .then(() => {
                      canGetNextQuestion = true;
                    });
                }
              });
          }, 1000);

          bot.on('callback_query', async (msg) => {
            const questionId = msg.data.split('_')[0];
            const questionText = msg.data.split('_')[1];
            const chatId = msg.message.chat.id;
            const message_id = msg.message.message_id;

            if (
              questionText ===
              questions.find((item) => item.id == questionId).correct
            ) {
              bot.removeListener('callback_query');
              clearInterval(intervalId);
              let totalPoints = basePoints + timer;
              user.score += totalPoints;
              await user.save();
              return bot
                .editMessageText(
                  `–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Ññ${
                    question.id
                  }: \n–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª ${totalPoints} –æ—á–∫–æ–≤! –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥–æ–π /quiz \n\n${
                    questions[questionId]
                      ? `–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω c ${new Date(
                          questions[questionId].date * 1000 + 10800000
                        ).toLocaleString('ru-RU')} –ø–æ –ú–°–ö`
                      : '–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å'
                  }`,
                  {
                    chat_id: chatId,
                    message_id: message_id,
                  }
                )
                .then(() => {
                  canGetNextQuestion = true;
                });
            } else {
              bot.removeListener('callback_query');
              clearInterval(intervalId);
              return bot
                .editMessageText(
                  `–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Ññ${
                    question.id
                  }: \n–ú–∏–º–æ! –ü–æ–ø—Ä–æ–±—É–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥–æ–π /quiz \n\n${
                    questions[questionId]
                      ? `–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω c ${new Date(
                          questions[questionId].date * 1000 + 10800000
                        ).toLocaleString('ru-RU')} –ø–æ –ú–°–ö`
                      : '–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å'
                  }`,
                  {
                    chat_id: chatId,
                    message_id: message_id,
                  }
                )
                .then(() => {
                  canGetNextQuestion = true;
                });
            }
          });
        });
    })
    .catch((error) => {
      console.log(error);
    });
};

const start = async () => {
  try {
    await sequelize.authenticate();
    await sequelize.sync(); //{ force: true } to drop db
  } catch (e) {
    console.log('Error' + e);
  }

  bot.on('message', async (msg) => {
    canGetNextQuestion = true;
    const text = msg.text;
    const chatId = msg.chat.id;
    const username = msg.from.username;
    const firstName = msg.from.first_name;
    try {
      if (text === '/start') {
        let user;
        try {
          await UserModel.create({
            chatId: chatId,
            username: username,
          });
        } catch (error) {
          if (error.name === 'SequelizeUniqueConstraintError') {
            user = await UserModel.findOne({
              where: { chatId },
            });
            if (!user.username) {
              user.username = username;
              await user.save();
            }
            return bot.sendMessage(
              chatId,
              `–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /quiz`
            );
          }
        }

        return bot.sendMessage(
          chatId,
          'üëã–ü—Ä–∏–≤–µ—Ç! \n\nüèüüèÜ<b>9 –∏—é–ª—è –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ –ø—Ä–æ–π–¥–µ—Ç Olimpbet –°—É–ø–µ—Ä–∫—É–±–æ–∫ –†–æ—Å—Å–∏–∏ –ø–æ —Ñ—É—Ç–±–æ–ª—É.</b> \n\nü§ì –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∫ —Å—É–ø–µ—Ä–º–∞—Ç—á—É ¬´–ó–µ–Ω–∏—Ç¬ª ‚Äì ¬´–°–ø–∞—Ä—Ç–∞–∫¬ª –∏ —Å—Ç–∞—Ä—Ç—É –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞ c 1 –∏—é–ª—è 10:00 –ø–æ 5 –∏—é–ª—è 23:59 –ø–æ –ú–°–ö –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º <b>¬´Olimpbet QUIZ¬ª!</b> \n\n‚ùóÔ∏è–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –∑–∞–ø—É—Å–∫–∞–π –≤–æ–ø—Ä–æ—Å—ã –∫–æ–º–∞–Ω–¥–æ–π /quiz. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É —Ç–µ–±—è –±—É–¥–µ—Ç –≤—Å–µ–≥–æ 30 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –ù–∞–¥–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –∏ –±—ã—Å—Ç—Ä–æ ‚Äì –∑–∞ —ç—Ç–æ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã. –ß–µ–º –±–æ–ª—å—à–µ —Ç—ã –Ω–∞–±–µ—Ä–µ—à—å –æ—á–∫–æ–≤, —Ç–µ–º –≤—ã—à–µ –±—É–¥—É—Ç —Ç–≤–æ–∏ —à–∞–Ω—Å—ã –ø–æ–ø–∞—Å—Ç—å –Ω–∞ Olimpbet-–°—É–ø–µ—Ä–∫—É–±–æ–∫ 2022. \n\nüéÅ <b>–ü—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–±–µ—Ä—É—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –ø–æ–ª—É—á–∞—Ç –ø–æ –¥–≤–∞ –±–∏–ª–µ—Ç–∞ –Ω–∞ –∏–≥—Ä—É.</b>',
          { parse_mode: 'HTML' }
        );
      }
      if (text === '/rules') {
        return bot.sendMessage(
          chatId,
          `<b>–ü–µ—Ä–∏–æ–¥ –∞–∫—Ü–∏–∏:</b> —Å 1 –ø–æ 5 –∏—é–ª—è 23:59 –ø–æ –ú–°–ö \n\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</b> 15 –≤–æ–ø—Ä–æ—Å–æ–≤, –≤–æ–ø—Ä–æ—Å—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–æ –æ–¥–Ω–æ–º—É —Å 1 –ø–æ 5 –∏—é–ª—è –≤ 10:00, 15:00, 20:00 –ø–æ –ú–°–ö \n\n<b>–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç:</b> 30 —Å–µ–∫—É–Ω–¥ \n\n<b>–ü–æ—Ä—è–¥–æ–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤:</b> –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ 60 –æ—á–∫–æ–≤. –ö–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Å—É–º–º–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç. \n\n<b>–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤: </b> 6 –∏—é–ª—è –º—ã —Å–≤—è–∂–µ–º—Å—è —Å 5 –∏–≥—Ä–æ–∫–∞–º–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—á–∫–æ–≤.`,
          { parse_mode: 'HTML' }
        );
      }
      if (text === '/promo') {
        return bot.sendMessage(
          chatId,
          `<a href="https://www.olimp.bet/promo/welcome_1500/?utm_source=bot_quiz&utm_medium=refer">üéÅ1500 —Ä—É–±–ª–µ–π –±–µ–∑ —É—Å–ª–æ–≤–∏–π –∏ –¥–µ–ø–æ–∑–∏—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</a> \n\n<a href="https://www.olimp.bet/promo/freebet/?utm_source=bot_quiz&utm_medium=refer">ü§ë30 000 —Ä—É–±–ª–µ–π –±–æ–Ω—É—Å –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</a> \n\n<a href="https://www.olimp.bet/promo/bonus-club/?utm_source=bot_quiz&utm_medium=refer">üß∞–í—Å—Ç—É–ø–∞–π –≤ –±–æ–Ω—É—Å-–∫–ª—É–± OLIMPBET –∏ –ø–æ–ª—É—á–∞–π —Ñ—Ä–∏–±–µ—Ç—ã, –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—á–µ—Ç –∏ –∫—ç—à–±—ç–∫ –¥–æ 20%!</a> \n\n<a href="https://www.olimp.bet/promo/bonus-na-express-100/?utm_source=bot_quiz&utm_medium=refer">ü§©–°–æ–±–∏—Ä–∞–π —ç–∫—Å–ø—Ä–µ—Å—Å—ã OLIMPBET –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å –¥–æ 100% –∫ –≤—ã–∏–≥—Ä—ã—à—É!</a>`,
          { parse_mode: 'HTML' }
        );
      }
      if (text === '/info') {
        const user = await UserModel.findOne({
          where: { chatId },
        });
        return bot.sendMessage(
          chatId,
          `–ü—Ä–∏–≤–µ—Ç!üëã \n\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:</b> ${user.countAnswers} \n\n‚úÖ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤:</b> ${user.score} \n\n–û—Ç–≤–µ—á–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ—á–∫–∏ üôå`,
          { parse_mode: 'HTML' }
        );
      }
      if (text === '/leaderboard') {
        const leaders = await UserModel.findAll({
          order: [['score', 'DESC']],
          group: ['user.id'],
          limit: 5,
          raw: true,
        });
        return bot.sendMessage(
          chatId,
          `–¢–û–ü-5 –∑–Ω–∞—Ç–æ–∫–æ–≤ üèÜ<b>OLIMPBET –°—É–ø–µ—Ä–∫—É–±–∫–∞ –†–æ—Å—Å–∏–∏</b>üèÜ:
          ${
            leaders.length !== 0
              ? `\n1Ô∏è‚É£ <b>${leaders[0].username}</b>, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤: ${leaders[0].score}`
              : '–ü–æ–∫–∞ –∑–Ω–∞—Ç–æ–∫–æ–≤ –Ω–µ—Ç ü§∑‚Äç‚ôÇÔ∏è'
          }
          ${
            leaders.length > 1
              ? `\n2Ô∏è‚É£ <b>${leaders[1].username}</b>, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤: ${leaders[1].score}`
              : ''
          }
          ${
            leaders.length > 2
              ? `\n3Ô∏è‚É£ <b>${leaders[2].username}</b>, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤: ${leaders[2].score}`
              : ''
          }
          ${
            leaders.length > 3
              ? `\n4Ô∏è‚É£ <b>${leaders[3].username}</b>, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤: ${leaders[3].score}`
              : ''
          }
          ${
            leaders.length > 4
              ? `\n5Ô∏è‚É£ <b>${leaders[4].username}</b>, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤: ${leaders[4].score}`
              : ''
          }`,
          { parse_mode: 'HTML' }
        );
      }
      if (text === '/quiz') {
        const user = await UserModel.findOne({
          where: { chatId },
        });
        if (!username) {
          return bot.sendMessage(
            chatId,
            '‚ÄºÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤ Telegram, —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ ¬´Olimpbet quiz¬ª, –∏ –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏!',
            {
              parse_mode: 'HTML',
            }
          );
        }
        if (!user.username) {
          try {
            user.username = username;
            await user.save();
          } catch (e) {
            return bot.sendMessage(
              chatId,
              '‚ÄºÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤ Telegram, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ ¬´Olimpbet quiz¬ª, –∏ –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏!',
              {
                parse_mode: 'HTML',
              }
            );
          }
        }
        if (!canGetNextQuestion) {
          return bot.sendMessage(
            chatId,
            '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å',
            {
              parse_mode: 'HTML',
            }
          );
        }
        const currentDate = new Date().getTime() / 1000;
        const canAnswer = user.countAnswers < questions.length;
        const availableQuestions = questions.filter(
          (q) => q.date < currentDate
        );
        if (currentDate > 1657054799 + 10800000) {
          return bot.sendMessage(
            chatId,
            '–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ, –º—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –ø–æ–¥–≤–æ–¥–∏—Ç—å –∏—Ç–æ–≥–∏. \n–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥–æ–π /info –∏ –æ–±—â–∏–π –∑–∞—á–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π /leaderboard',
            {
              parse_mode: 'HTML',
            }
          );
        }
        if (!canAnswer) {
          return bot.sendMessage(
            chatId,
            '–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. \n–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥–æ–π /info –∏ –æ–±—â–∏–π –∑–∞—á–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π /leaderboard',
            {
              parse_mode: 'HTML',
            }
          );
        }

        if (
          availableQuestions.length === 0 ||
          availableQuestions.length <= user.countAnswers
        ) {
          return bot.sendMessage(
            chatId,
            '–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –µ—â–µ –Ω–µ—Ç. \n–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /rules',
            {
              parse_mode: 'HTML',
            }
          );
        }
        if (availableQuestions.length > user.countAnswers) {
          canGetNextQuestion = false;
          return startQuestion(chatId, user);
        }
        return bot.sendMessage(
          chatId,
          '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. \n–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /rules, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥–æ–π /info –∏ –æ–±—â–∏–π –∑–∞—á–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π /leaderboard',
          {
            parse_mode: 'HTML',
          }
        );
      }
      return bot.sendMessage(
        chatId,
        '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é'
      );
    } catch (e) {
      return bot.sendMessage(
        chatId,
        `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${e}, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. ChatId = ${chatId}`
      );
    }
  });
};
start();
